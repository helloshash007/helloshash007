stage('Fetch Ansible Tower Job Logs') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'ansible_tower_credentials', 
                                          usernameVariable: 'TOWER_USERNAME', 
                                          passwordVariable: 'TOWER_PASSWORD')]) {
            script {
                echo "Fetching logs for Ansible Tower Job ID: ${env.ANSIBLE_JOB_ID}"

                def response = sh(
                    script: '''
                    curl -sk -u "$TOWER_USERNAME:$TOWER_PASSWORD" \
                    -H "Content-Type: application/json" \
                    "$TOWER_URL/jobs/$ANSIBLE_JOB_ID/stdout/?format=json" \
                    -w "%{http_code}" \
                    -o ansible_tower_logs.json
                    ''',
                    returnStdout: true
                ).trim()

                def responseCode = response[-3..-1]
                echo "Debug: Fetch Logs Response Code: ${responseCode}"

                if (responseCode != "200") {
                    sh "cat ansible_tower_logs.json || echo 'No logs retrieved'"
                    error "Failed to fetch logs for Job ID: ${env.ANSIBLE_JOB_ID}. HTTP Status: ${responseCode}"
                }

                def responseContent = readFile('ansible_tower_logs.json')
                echo "Raw Logs Response: ${responseContent}"

                if (responseContent.trim().startsWith("{") || responseContent.trim().startsWith("[")) {
                    def logsJson = readJSON text: responseContent

                    logsJson.each { entry ->
                        if (entry instanceof Map) {
                            echo "Phase: ${entry.get('event_display', 'N/A')}, Output: ${entry.get('stdout', 'No output')}"
                        } else if (entry instanceof java.util.AbstractMap.SimpleImmutableEntry) {
                            echo "Key: ${entry.key}, Value: ${entry.value}"
                        } else {
                            echo "Unexpected Entry Type: ${entry.getClass()}"
                            echo "Entry Content: ${entry}"
                        }
                    }
                } else {
                    echo "Logs are not in JSON format. Raw Content: ${responseContent}"
                }
            }
        }
    }
}