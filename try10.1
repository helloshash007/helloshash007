import re
import logging
from datetime import datetime, timedelta

# In-memory tracking of slot states
slot_states = {}

def parse_log_line(line):
    """
    Parse a single line of log for errors, warnings, and recovery events.
    """
    timestamp_str = line.split(' - ')[0]
    try:
        timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S,%f')
    except ValueError:
        logging.warning(f"Skipping log entry with invalid timestamp: {timestamp_str}")
        return None, None, None, None
    
    log_level = line.split(' - ')[1].strip()
    message = line.split(' - ')[2].strip()
    
    # Extract slot name
    slot_match = re.search(r'Slot\s*:? (\w+)', message)
    slot_name = slot_match.group(1) if slot_match else None
    
    return timestamp, log_level, message, slot_name

def update_slot_state(slot_name, timestamp, log_level, message):
    """
    Update the state of the slot based on the log entry.
    """
    if slot_name not in slot_states:
        slot_states[slot_name] = {
            'error': None,
            'warning': None,
            'recovery_time': None,
            'recovery_duration': None,
            'resolved': False
        }
    
    if log_level == 'ERROR' and 'recovered' not in message:
        # Log an error start time
        slot_states[slot_name]['error'] = timestamp
        slot_states[slot_name]['resolved'] = False
    elif log_level == 'WARNING' and 'recovered' not in message:
        # Log a warning start time
        slot_states[slot_name]['warning'] = timestamp
        slot_states[slot_name]['resolved'] = False
    elif 'recovered' in message:
        # Mark recovery time and calculate duration
        if slot_states[slot_name]['error'] or slot_states[slot_name]['warning']:
            slot_states[slot_name]['recovery_time'] = timestamp
            start_time = slot_states[slot_name]['error'] or slot_states[slot_name]['warning']
            slot_states[slot_name]['recovery_duration'] = str(timestamp - start_time)
            slot_states[slot_name]['resolved'] = True

def generate_report():
    """
    Generate the status report based on the slot states.
    """
    report = ""
    for slot_name, state in slot_states.items():
        if state['error'] or state['warning']:
            recovery_time = state['recovery_time'] or "Not Yet Recovered"
            resolved_status = "Resolved" if state['resolved'] else "Unresolved"
            start_time = state['error'] or state['warning']
            recovery_duration = state['recovery_duration'] or "N/A"
            
            report += (
                f"**Slot Name: {slot_name}**\n"
                f"  - **Start Time:** {start_time}\n"
                f"  - **Recovery Time:** {recovery_time}\n"
                f"  - **Recovery Duration:** {recovery_duration}\n"
                f"  - **Status:** {resolved_status}\n\n"
            )
    return report

def process_logs(log_lines):
    """
    Process all log lines to update slot states and generate the report.
    """
    for line in log_lines:
        timestamp, log_level, message, slot_name = parse_log_line(line)
        if slot_name:
            update_slot_state(slot_name, timestamp, log_level, message)

    # Generate the report
    return generate_report()

# Simulate reading log lines from the log file
log_lines = [
    "2024-09-23 11:04:54,475 - ERROR - Slot : slot1 - replication lag detected",
    "2024-09-23 11:10:54,475 - INFO - Slot : slot1 - replication lag recovered",
    "2024-09-23 11:12:54,475 - WARNING - Slot : slot2 - replication lag increasing",
    "2024-09-23 11:20:54,475 - INFO - Slot : slot2 - replication lag recovered"
]

# Process the logs and generate the report
report = process_logs(log_lines)
print(report)