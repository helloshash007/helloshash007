import logging
from fpdf import FPDF
from datetime import datetime, timedelta
import os
import requests
import pytz
import schedule
import time

# Confluence credentials and report configuration
CONFLUENCE_URL = "https://your-confluence-url/rest/api/content/your-page-id"
USERNAME = "your_username"
PASSWORD = "your_password"

# Directory paths for logs and report
log_directory = "/path/to/logs"
report_directory = "/path/to/reports"

# Timezone for IST
IST = pytz.timezone("Asia/Kolkata")

# Configure logging
logging.basicConfig(
    filename=f"{report_directory}/replication_report.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# PDF Report class with color coding for errors, warnings, and infos
class EnhancedPDFReport(FPDF):
    def header(self):
        self.set_font("Arial", "B", 20)
        self.cell(200, 10, "Replication Slot Health Report", ln=True, align="C")
        self.ln(5)
        self.set_font("Arial", "I", 12)
        self.cell(200, 10, f"Report generated on: {datetime.now(IST).strftime('%Y-%m-%d %H:%M:%S')}", ln=True, align="C")
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, f"Page {self.page_no()}", 0, 0, "C")

    def add_cover_page(self):
        self.add_page()
        self.set_font("Arial", "B", 24)
        self.cell(0, 80, "Daily Replication Report", ln=True, align="C")
        self.set_font("Arial", "I", 16)
        self.cell(0, 10, f"Date: {datetime.now(IST).strftime('%Y-%m-%d')}", ln=True, align="C")
        self.ln(50)

    def add_summary_table(self, slots):
        self.set_font("Arial", "B", 16)
        self.cell(0, 10, "Summary", ln=True)
        self.ln(5)
        self.set_font("Arial", "B", 12)
        self.cell(60, 10, "Slot Name", border=1)
        self.cell(40, 10, "Total Errors", border=1)
        self.cell(40, 10, "Total Warnings", border=1)
        self.cell(40, 10, "Total Infos", border=1)
        self.cell(40, 10, "Status", border=1)
        self.ln()

        self.set_font("Arial", "", 12)
        for slot, data in slots.items():
            self.cell(60, 10, slot, border=1)
            self.cell(40, 10, str(len(data['errors'])), border=1)
            self.cell(40, 10, str(len(data['warnings'])), border=1)
            self.cell(40, 10, str(len(data['infos'])), border=1)
            status = "OK"
            if len(data['errors']) > 0:
                status = "Critical"
                self.set_text_color(255, 0, 0)
            elif len(data['warnings']) > 0:
                status = "Warning"
                self.set_text_color(255, 255, 0)
            else:
                self.set_text_color(0, 128, 0)
            self.cell(40, 10, status, border=1)
            self.ln()
        self.set_text_color(0, 0, 0)
        self.ln(10)

    def add_detailed_slot_section(self, slot, data):
        self.add_page()
        self.set_font("Arial", "B", 16)
        self.cell(0, 10, f"Details for Slot: {slot}", ln=True)
        self.ln(5)
        self.set_font("Arial", "B", 12)
        self.cell(60, 10, "Timestamp", border=1)
        self.cell(40, 10, "Log Type", border=1)
        self.cell(90, 10, "Message", border=1)
        self.ln()
        self.set_font("Arial", "", 12)
        for error_time, error_msg in data['errors']:
            self.set_text_color(255, 0, 0)
            self.cell(60, 10, error_time.strftime("%Y-%m-%d %H:%M:%S"), border=1)
            self.cell(40, 10, "ERROR", border=1)
            self.cell(90, 10, error_msg, border=1)
            self.ln()
        for warning_time, warning_msg in data['warnings']:
            self.set_text_color(255, 255, 0)
            self.cell(60, 10, warning_time.strftime("%Y-%m-%d %H:%M:%S"), border=1)
            self.cell(40, 10, "WARNING", border=1)
            self.cell(90, 10, warning_msg, border=1)
            self.ln()
        for info_time, info_msg in data['infos']:
            self.set_text_color(0, 0, 0)
            self.cell(60, 10, info_time.strftime("%Y-%m-%d %H:%M:%S"), border=1)
            self.cell(40, 10, "INFO", border=1)
            self.cell(90, 10, info_msg, border=1)
            self.ln()
        self.set_text_color(0, 0, 0)
        self.ln(5)

    def generate_report(self, slots):
        self.add_cover_page()
        self.add_summary_table(slots)
        for slot, data in slots.items():
            self.add_detailed_slot_section(slot, data)
        report_file = f"{report_directory}/replication_report_{datetime.now(IST).strftime('%Y%m%d')}.pdf"
        self.output(report_file)
        return report_file

# Processing log function - only last 24 hours of logs
def process_logs():
    logging.info("Processing logs from the last 24 hours...")
    slot_data = {}
    try:
        now = datetime.now(IST)
        last_24_hours = now - timedelta(hours=24)

        with open(f"{log_directory}/replication_log.txt", "r") as log_file:
            for line in log_file.readlines():
                try:
                    timestamp_str, level, log_message = line.split(" ", 2)
                    timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.UTC).astimezone(IST)
                    
                    if timestamp < last_24_hours:
                        continue  # Skip logs older than 24 hours
                    
                    if "slot" in log_message.lower():
                        slot_name = log_message.split("slot:")[1].split()[0]
                        if slot_name not in slot_data:
                            slot_data[slot_name] = {'errors': [], 'warnings': [], 'infos': []}
                        
                        # Handling different log levels
                        if level.startswith("ERROR:"):
                            slot_data[slot_name]['errors'].append((timestamp, log_message.strip()))
                        elif level.startswith("WARNING:"):
                            slot_data[slot_name]['warnings'].append((timestamp, log_message.strip()))
                        elif level.startswith("INFO:"):
                            slot_data[slot_name]['infos'].append((timestamp, log_message.strip()))
                except ValueError:
                    logging.warning(f"Skipping malformed log line: {line}")
                    continue
        pdf = EnhancedPDFReport()
        report_file = pdf.generate_report(slot_data)
        upload_to_confluence(report_file)
    except Exception as e:
        logging.error(f"Error while processing logs: {e}")

# Upload to Confluence
def upload_to_confluence(report_file):
    logging.info("Uploading report to Confluence...")
    try:
        with open(report_file, "rb") as f:
            files = {'file': (os.path.basename(report_file), f, 'application/pdf')}
            response = requests.post(CONFLUENCE_URL, auth=(USERNAME, PASSWORD), files=files)
            if response.status_code == 200:
                logging.info(f"Report uploaded successfully to Confluence.")
            else:
                logging.error(f"Failed to upload report: {response.status_code} {response.text}")
    except Exception as e:
        logging.error(f"Error uploading report to Confluence: {e}")

# Schedule the task
def schedule_daily_report():
    logging.info("Scheduling daily report generation at 11 AM IST.")
    schedule.every().day.at("11:00").do(process_logs)

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    schedule_daily_report()