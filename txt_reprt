from datetime import datetime, timedelta
import os
import requests
import schedule
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# Confluence credentials and report configuration
CONFLUENCE_URL = "https://your-confluence-url/rest/api/content/your-page-id"
USERNAME = "your_username"
PASSWORD = "your_password"

# Directory paths for logs and report
log_directory = "/path/to/logs"
report_directory = "/path/to/reports"

# Processing log function and generating a text report
def process_logs():
    slot_data = {}
    with open(f"{log_directory}/replication_log.txt", "r") as log_file:
        for line in log_file.readlines():
            try:
                timestamp_str, level, log_message = line.split(" ", 2)
                timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
                if "slot" in log_message.lower():
                    slot_name = log_message.split("slot:")[1].split()[0]
                    if slot_name not in slot_data:
                        slot_data[slot_name] = {'errors': [], 'warnings': [], 'infos': []}
                    if level == "ERROR:":
                        slot_data[slot_name]['errors'].append((timestamp, log_message.strip()))
                    elif level == "WARNING:":
                        slot_data[slot_name]['warnings'].append((timestamp, log_message.strip()))
                    elif level == "INFO:":
                        slot_data[slot_name]['infos'].append((timestamp, log_message.strip()))
            except ValueError:
                continue
    
    report_file = generate_txt_report(slot_data)
    upload_to_confluence(report_file)

# Generate the text report based on processed logs
def generate_txt_report(slots):
    report_file = f"{report_directory}/replication_report_{datetime.now().strftime('%Y%m%d')}.txt"
    
    with open(report_file, "w") as report:
        report.write("Replication Slot Health Report\n")
        report.write(f"Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        report.write("=" * 80 + "\n\n")

        # Summary Section
        report.write("Summary\n")
        report.write("=" * 80 + "\n")
        report.write(f"{'Slot Name':<20}{'Errors':<15}{'Warnings':<15}{'Infos':<15}{'Status':<15}\n")
        report.write("=" * 80 + "\n")

        for slot, data in slots.items():
            error_count = len(data['errors'])
            warning_count = len(data['warnings'])
            info_count = len(data['infos'])
            status = "OK"
            if error_count > 0:
                status = "Critical"
            elif warning_count > 0:
                status = "Warning"
            report.write(f"{slot:<20}{error_count:<15}{warning_count:<15}{info_count:<15}{status:<15}\n")

        report.write("\nDetailed Logs\n")
        report.write("=" * 80 + "\n")
        
        for slot, data in slots.items():
            report.write(f"Details for Slot: {slot}\n")
            report.write("=" * 80 + "\n")
            for error_time, error_msg in data['errors']:
                report.write(f"[ERROR] {error_time.strftime('%Y-%m-%d %H:%M:%S')} - {error_msg}\n")
            for warning_time, warning_msg in data['warnings']:
                report.write(f"[WARNING] {warning_time.strftime('%Y-%m-%d %H:%M:%S')} - {warning_msg}\n")
            for info_time, info_msg in data['infos']:
                report.write(f"[INFO] {info_time.strftime('%Y-%m-%d %H:%M:%S')} - {info_msg}\n")
            report.write("\n")
    
    return report_file

# Upload to Confluence
def upload_to_confluence(report_file):
    with open(report_file, 'rb') as file:
        files = {'file': file}
        response = requests.post(CONFLUENCE_URL, auth=(USERNAME, PASSWORD), files=files)
        if response.status_code == 200:
            print("Report uploaded successfully to Confluence.")
        else:
            print(f"Failed to upload report to Confluence. Status Code: {response.status_code}")

# Watchdog Handler to monitor log file changes
class LogFileEventHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if not event.is_directory and "replication_log.txt" in event.src_path:
            print("Log file modified, generating report...")
            process_logs()

# Setup watchdog observer
def start_watchdog():
    event_handler = LogFileEventHandler()
    observer = Observer()
    observer.schedule(event_handler, path=log_directory, recursive=False)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# Scheduling task for report generation and upload at 8 AM IST daily
def schedule_report():
    print(f"Scheduled report generation at 8 AM IST.")
    schedule.every().day.at("02:30").do(process_logs)  # Schedule for 2:30 AM UTC, which is 8:00 AM IST

# Entry point of the script
if __name__ == "__main__":
    schedule_report()
    start_watchdog()

    while True:
        schedule.run_pending()
        time.sleep(1)