stage('Launch Ansible Tower Job and Fetch Logs') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'ansible_tower_credentials', 
                                          usernameVariable: 'TOWER_USERNAME', 
                                          passwordVariable: 'TOWER_PASSWORD')]) {
            script {
                // Define the job ID and URL
                def jobId = env.ANSIBLE_JOB_ID
                def towerUrl = env.TOWER_URL

                echo "Launching Ansible Tower Job ID: ${jobId}"

                // Launch the job (if not already launched)
                def response = sh(
                    script: """
                    curl -sk -u "$TOWER_USERNAME:$TOWER_PASSWORD" \
                    -H "Content-Type: application/json" \
                    "$towerUrl/jobs/$jobId/launch/" \
                    -w "%{http_code}" \
                    -o ansible_tower_job_response.json
                    """,
                    returnStdout: true
                ).trim()

                echo "Job launched with response: ${response}"

                // Parse the job status to start polling
                def jobRunning = true
                def jobStatus = "pending"  // Initialize job status

                while (jobRunning) {
                    // Poll the job status
                    def statusResponse = sh(
                        script: """
                        curl -sk -u "$TOWER_USERNAME:$TOWER_PASSWORD" \
                        -H "Content-Type: application/json" \
                        "$towerUrl/jobs/$jobId/" \
                        -w "%{http_code}" \
                        -o ansible_tower_job_status.json
                        """,
                        returnStdout: true
                    ).trim()

                    // Parse the response to check job status
                    def statusContent = readFile('ansible_tower_job_status.json')
                    def statusJson = readJSON text: statusContent
                    jobStatus = statusJson.status  // Get the job status

                    echo "Job Status: ${jobStatus}"

                    // Check if the job is still running or completed
                    if (jobStatus == "successful" || jobStatus == "failed") {
                        jobRunning = false
                    } else {
                        // Wait for a few seconds before polling again
                        echo "Waiting for job to complete... Will check again in 30 seconds."
                        sleep 30
                    }
                }

                // After the job finishes, fetch logs
                echo "Job completed with status: ${jobStatus}"

                // Fetch the logs once the job is complete
                def logsResponse = sh(
                    script: """
                    curl -sk -u "$TOWER_USERNAME:$TOWER_PASSWORD" \
                    -H "Content-Type: application/json" \
                    "$towerUrl/jobs/$jobId/stdout/?format=json" \
                    -w "%{http_code}" \
                    -o ansible_tower_logs.json
                    """,
                    returnStdout: true
                ).trim()

                // Check if fetching logs was successful
                def logsResponseCode = logsResponse[-3..-1]
                if (logsResponseCode != "200") {
                    echo "Failed to fetch logs. HTTP Status: ${logsResponseCode}"
                    error "Failed to fetch logs for Job ID: ${jobId}. HTTP Status: ${logsResponseCode}"
                }

                // Read and parse logs JSON
                def logsContent = readFile('ansible_tower_logs.json')
                echo "Raw Logs Content:"
                echo "${logsContent}"

                // Parse the logs to extract task names and check success
                def logsJson = readJSON text: logsContent
                def jobSuccessful = true

                // Loop through logs to extract task names
                logsJson.each { entry ->
                    if (entry.event_display) {
                        echo "Task: ${entry.event_display}"

                        // Check for failed tasks
                        if (entry.event == 'failed') {
                            jobSuccessful = false
                        }
                    }
                }

                // Final job completion message
                if (jobSuccessful) {
                    echo "Ansible Job completed successfully."
                } else {
                    echo "Ansible Job encountered failures."
                }
            }
        }
    }
}