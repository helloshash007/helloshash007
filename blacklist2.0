#!/usr/bin/env python3

import json
import time
import schedule
import psycopg2
import subprocess
from datetime import datetime

# ------------------- Configuration -------------------
TRANSLATOR_URL = "https://translator.example.com"
API_URL = "https://auth.example.com"
TRANSLATOR_USER = "your_username"
TRANSLATOR_PASS = "your_password"
CHANNEL_ID = "XXXX"
DB_CONFIG = {
    "host": "your_db_host",
    "port": 5432,
    "user": "your_db_user",
    "password": "your_db_password",
    "dbname": "your_db_name"
}
LOG_FILE = "/var/log/user_sync_log.json"
BATCH_SIZE = 200
# ------------------------------------------------------

def json_log(event_type, details):
    """Log events in structured JSON format."""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "event_type": event_type,
        "details": details
    }
    with open(LOG_FILE, "a") as f:
        f.write(json.dumps(log_entry) + "\n")

def get_jwt_token():
    """Call translator URL to get JWT token."""
    payload = {
        "input_token_state": {
            "token_type": "CREDENTIAL",
            "username": TRANSLATOR_USER,
            "password": TRANSLATOR_PASS
        },
        "output_token_state": {
            "token_type": "JWT"
        }
    }
    try:
        result = subprocess.run(
            ["curl", "-s", "-X", "POST", TRANSLATOR_URL,
             "-H", "Content-Type: application/json",
             "-d", json.dumps(payload)],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        if result.stderr:
            json_log("translator_curl_error", {"error": result.stderr.strip()})
        response = json.loads(result.stdout)
        token = response.get("output_token")
        if token:
            json_log("token_acquired", {"note": "JWT token acquired"})
            return token
        else:
            json_log("token_missing", {"response": response})
            return None
    except Exception as e:
        json_log("token_exception", {"error": str(e)})
        return None

def call_user_api(jwt_token, guid_batch):
    """Call API with JWT token and GUID batch."""
    payload = {
        "filter criteria": [{
            "filter key": "guid",
            "filter value": guid_batch,
            "filterOperation": "in"
        }],
        "recordsPerPage": BATCH_SIZE
    }
    try:
        result = subprocess.run(
            ["curl", "-s", "-X", "POST", API_URL,
             "-H", f"X-TRUST-Token: {jwt_token}",
             "-H", f"X-CHANNELD: {CHANNEL_ID}",
             "-H", "Content-Type: application/json",
             "-d", json.dumps(payload)],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        if result.stderr:
            json_log("api_curl_error", {"error": result.stderr.strip()})
        response = json.loads(result.stdout)
        users = response.get("users", [])
        json_log("api_response", {
            "guid_count": len(guid_batch),
            "returned_count": len(users)
        })
        return users
    except Exception as e:
        json_log("api_exception", {"error": str(e)})
        return []

def update_user(conn, schema, user_ref, api_user):
    """Update mismatched user info in DB."""
    try:
        with conn.cursor() as cur:
            cur.execute(f"""
                UPDATE {schema}.users
                SET first_name = %s,
                    last_name = %s,
                    email = %s,
                    updated_time = %s
                WHERE user_ref = %s
            """, (
                api_user["first_name"],
                api_user["last_name"],
                api_user["email"],
                datetime.now(),
                user_ref
            ))
            conn.commit()
            json_log("user_updated", {
                "schema": schema,
                "user_ref": user_ref,
                "new_data": api_user
            })
    except Exception as e:
        json_log("update_failed", {
            "schema": schema,
            "user_ref": user_ref,
            "error": str(e)
        })

def get_all_schemas(conn):
    """Get all user-defined schemas."""
    with conn.cursor() as cur:
        cur.execute("SELECT schema_name FROM information_schema.schemata")
        return [s[0] for s in cur.fetchall() if not s[0].startswith("pg_") and s[0] != "information_schema"]

def get_user_refs(conn, schema):
    """Get user_ref values from users table."""
    try:
        with conn.cursor() as cur:
            cur.execute(f"SELECT user_ref FROM {schema}.users")
            return [r[0] for r in cur.fetchall()]
    except:
        return []

def get_user_data(conn, schema, user_ref):
    """Fetch user record for comparison."""
    with conn.cursor() as cur:
        cur.execute(f"SELECT first_name, last_name, email FROM {schema}.users WHERE user_ref = %s", (user_ref,))
        return cur.fetchone()

def process_all():
    """Main job logic: gather GUIDs, call API, compare and update."""
    conn = psycopg2.connect(**DB_CONFIG)
    schemas = get_all_schemas(conn)

    all_guids = []
    schema_map = {}

    # Collect all GUIDs and schema mapping
    for schema in schemas:
        refs = get_user_refs(conn, schema)
        for ref in refs:
            all_guids.append(ref)
            schema_map[ref] = schema

    for i in range(0, len(all_guids), BATCH_SIZE):
        batch = all_guids[i:i+BATCH_SIZE]
        jwt_token = get_jwt_token()
        if not jwt_token:
            json_log("batch_skipped", {"reason": "missing token", "batch_index": i})
            continue

        users = call_user_api(jwt_token, batch)
        for api_user in users:
            ref = api_user.get("guid")
            if not ref or ref not in schema_map:
                continue
            schema = schema_map[ref]
            db_data = get_user_data(conn, schema, ref)
            if not db_data:
                continue
            db_first, db_last, db_email = db_data

            if (db_first != api_user["first_name"] or
                db_last != api_user["last_name"] or
                db_email != api_user["email"]):

                json_log("user_mismatch", {
                    "schema": schema,
                    "user_ref": ref,
                    "db": {
                        "first_name": db_first,
                        "last_name": db_last,
                        "email": db_email
                    },
                    "api": {
                        "first_name": api_user["first_name"],
                        "last_name": api_user["last_name"],
                        "email": api_user["email"]
                    }
                })
                update_user(conn, schema, ref, api_user)
    conn.close()

def run_user_sync():
    json_log("job_start", {"note": "User sync job started"})
    try:
        process_all()
    except Exception as e:
        json_log("job_failed", {"error": str(e)})
    json_log("job_end", {"note": "User sync job finished"})

# ------------------ Scheduler ------------------
schedule.every(1).minutes.do(run_user_sync)
schedule.every().day.at("15:00").do(run_user_sync)

if __name__ == "__main__":
    json_log("scheduler_started", {"note": "Scheduler started"})
    while True:
        schedule.run_pending()
        time.sleep(1)