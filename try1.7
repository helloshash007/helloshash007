import logging
from datetime import datetime, timedelta

# Initialize logs for errors and warnings
slot_logs = {}

# Setup logging configuration
logging.basicConfig(filename='replication_monitor.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Function to read logs for the last 24 hours
def get_logs_from_last_24_hours():
    now = datetime.now()
    report_start_time = now - timedelta(hours=24)

    # List to store relevant logs from the last 24 hours
    relevant_logs = []

    # Read and filter logs based on timestamp
    with open("replication_monitor.log", "r") as log_file:
        logs = log_file.readlines()

    for log in logs:
        try:
            log_time_str = log.split(" - ")[0].strip()
            log_time = datetime.strptime(log_time_str, "%Y-%m-%d %H:%M:%S,%f")

            # Filter logs that fall within the last 24 hours
            if report_start_time <= log_time <= now:
                relevant_logs.append(log)
        except ValueError as e:
            logging.warning(f"Skipping log entry with invalid timestamp: {log.strip()} due to error: {e}")

    return relevant_logs

# Function to generate the status report for the last 24 hours
def generate_status_report():
    logs = get_logs_from_last_24_hours()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Initialize error and warning counts (including recovered)
    error_count = sum([len(logs.get('errors', [])) for logs in slot_logs.values()])
    warning_count = sum([len(logs.get('warnings', [])) for logs in slot_logs.values()])

    # Start building the report
    report = (
        f"### **Replication Monitoring Status Report (Last 24 Hours)**\n\n"
        f"**Date:** {datetime.now().strftime('%Y-%m-%d')}\n"
        f"**Report Generated At:** {current_time}\n\n"
        "---\n\n"
        f"#### **Summary:**\n"
        f"- **Total Errors:** {error_count}\n"
        f"- **Total Warnings:** {warning_count}\n\n"
        "#### **Errors and Warnings with Recovery Times:**\n\n"
    )

    # Iterate over all slots to add details for errors and warnings (including recovered)
    for slot_name, logs in slot_logs.items():
        if logs.get('errors'):
            report += f"**Slot Name: {slot_name}**\n\n"
            for error in logs['errors']:
                recovery_time = error.get('recovery_time', 'Not Yet Recovered')
                recovery_duration = error.get('recovery_duration', 'N/A')
                report += (
                    f"- **Error Start Time:** {error.get('start_time', 'N/A')}\n"
                    f"  - **Recovery Time:** {recovery_time}\n"
                    f"  - **Duration:** {recovery_duration}\n\n"
                )

        if logs.get('warnings'):
            for warning in logs['warnings']:
                recovery_time = warning.get('recovery_time', 'Not Yet Recovered')
                recovery_duration = warning.get('recovery_duration', 'N/A')
                report += (
                    f"- **Warning Start Time:** {warning.get('start_time', 'N/A')}\n"
                    f"  - **Recovery Time:** {recovery_time}\n"
                    f"  - **Duration:** {recovery_duration}\n\n"
                )

    # If there are no relevant logs, add a message stating that
    if error_count == 0 and warning_count == 0:
        report += "*No errors or warnings were logged in the past 24 hours.*\n"

    # Write the report to a file with current timestamp in the filename
    report_filename = f"replication_status_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(report_filename, "w") as report_file:
        report_file.write(report)

    logging.info(f"Report generated: {report_filename}")
    return report_filename

# Function to log an error or warning for a specific slot
def log_event(slot_name, event_type, start_time):
    if slot_name not in slot_logs:
        slot_logs[slot_name] = {'errors': [], 'warnings': []}

    log_entry = {
        'start_time': start_time,
        'recovery_time': None,
        'recovery_duration': None,
    }

    if event_type == 'error':
        slot_logs[slot_name]['errors'].append(log_entry)
    elif event_type == 'warning':
        slot_logs[slot_name]['warnings'].append(log_entry)

# Function to log the recovery of an error or warning for a specific slot
def log_recovery(slot_name, event_type, recovery_time):
    if event_type == 'error':
        for error in slot_logs.get(slot_name, {}).get('errors', []):
            if error['recovery_time'] is None:  # Only log recovery if not already recovered
                error['recovery_time'] = recovery_time
                error['recovery_duration'] = str(recovery_time - error['start_time'])
                logging.info(f"Error recovered for Slot {slot_name} at {recovery_time}. Duration: {error['recovery_duration']}")
    elif event_type == 'warning':
        for warning in slot_logs.get(slot_name, {}).get('warnings', []):
            if warning['recovery_time'] is None:  # Only log recovery if not already recovered
                warning['recovery_time'] = recovery_time
                warning['recovery_duration'] = str(recovery_time - warning['start_time'])
                logging.info(f"Warning recovered for Slot {slot_name} at {recovery_time}. Duration: {warning['recovery_duration']}")

# Example usage
log_event('slot1', 'error', datetime(2024, 9, 18, 10, 0))
log_recovery('slot1', 'error', datetime(2024, 9, 18, 11, 0))

log_event('slot2', 'warning', datetime(2024, 9, 18, 9, 0))
log_recovery('slot2', 'warning', datetime(2024, 9, 18, 10, 0))

# Generate the report
generate_status_report()